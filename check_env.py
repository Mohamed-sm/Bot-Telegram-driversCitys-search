#!/usr/bin/env python3
"""
Script de v√©rification de l'environnement
"""

import os
import sys
import subprocess

def check_python_version():
    """V√©rifie la version de Python"""
    print(f"üêç Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    if sys.version_info < (3, 8):
        print("‚ùå Version Python trop ancienne (3.8+ requis)")
        return False
    print("‚úÖ Version Python compatible")
    return True

def check_virtual_environment():
    """V√©rifie l'environnement virtuel"""
    venv_path = "venv"
    
    if not os.path.exists(venv_path):
        print("‚ùå Environnement virtuel non trouv√©")
        print("üí° Lancez: python setup.py")
        return False
    
    print("‚úÖ Environnement virtuel trouv√©")
    
    # V√©rifier si l'environnement virtuel est activ√©
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚úÖ Environnement virtuel activ√©")
    else:
        print("‚ö†Ô∏è Environnement virtuel non activ√©")
        print("üí° Activez-le avec:")
        if os.name == 'nt':  # Windows
            print("   venv\\Scripts\\activate")
        else:  # Unix/Linux/macOS
            print("   source venv/bin/activate")
    
    return True

def check_dependencies():
    """V√©rifie les d√©pendances"""
    print("\nüì¶ V√©rification des d√©pendances...")
    
    required_packages = [
        'telegram',
        'pandas',
        'openpyxl',
        'python-dotenv'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} manquant")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è Packages manquants: {', '.join(missing_packages)}")
        print("üí° Installez-les avec: pip install -r requirements.txt")
        return False
    
    print("‚úÖ Toutes les d√©pendances sont install√©es")
    return True

def check_configuration():
    """V√©rifie la configuration"""
    print("\n‚öôÔ∏è V√©rification de la configuration...")
    
    # V√©rifier le fichier .env
    if os.path.exists('.env'):
        print("‚úÖ Fichier .env trouv√©")
        
        # V√©rifier le token
        try:
            with open('.env', 'r') as f:
                content = f.read()
                if 'BOT_TOKEN=YOUR_BOT_TOKEN' in content:
                    print("‚ö†Ô∏è Token de bot non configur√©")
                    print("üí° Configurez votre token dans le fichier .env")
                    return False
                elif 'BOT_TOKEN=' in content:
                    print("‚úÖ Token de bot configur√©")
                else:
                    print("‚ùå Token de bot manquant")
                    return False
        except Exception as e:
            print(f"‚ùå Erreur lors de la lecture du fichier .env: {e}")
            return False
    else:
        print("‚ùå Fichier .env manquant")
        print("üí° Cr√©ez-le avec: cp env_example.txt .env")
        return False
    
    return True

def check_database():
    """V√©rifie la base de donn√©es"""
    print("\nüóÑÔ∏è V√©rification de la base de donn√©es...")
    
    # V√©rifier le fichier Excel
    if os.path.exists('drivers_data.xlsx'):
        print("‚úÖ Fichier Excel trouv√©")
    else:
        print("‚ùå Fichier Excel manquant")
        print("üí° Cr√©ez-le avec: python utils/db_manager.py create_sample")
        return False
    
    # V√©rifier la base de donn√©es SQLite
    if os.path.exists('drivers.db'):
        print("‚úÖ Base de donn√©es SQLite trouv√©e")
    else:
        print("‚ö†Ô∏è Base de donn√©es SQLite non trouv√©e")
        print("üí° Elle sera cr√©√©e automatiquement au premier lancement")
    
    return True

def check_scripts():
    """V√©rifie les scripts d'activation"""
    print("\nüìù V√©rification des scripts...")
    
    scripts_found = 0
    
    if os.path.exists('activate_and_run.sh'):
        print("‚úÖ Script d'activation Unix trouv√©")
        scripts_found += 1
    
    if os.path.exists('activate_and_run.bat'):
        print("‚úÖ Script d'activation Windows trouv√©")
        scripts_found += 1
    
    if scripts_found == 0:
        print("‚ö†Ô∏è Aucun script d'activation trouv√©")
        print("üí° Cr√©ez-les avec: python setup.py")
    
    return True

def main():
    """Fonction principale"""
    print("üîç V√©rification de l'environnement du bot Telegram")
    print("=" * 50)
    
    checks = [
        ("Version Python", check_python_version),
        ("Environnement virtuel", check_virtual_environment),
        ("D√©pendances", check_dependencies),
        ("Configuration", check_configuration),
        ("Base de donn√©es", check_database),
        ("Scripts", check_scripts)
    ]
    
    all_passed = True
    
    for check_name, check_func in checks:
        print(f"\nüîß {check_name}...")
        if not check_func():
            all_passed = False
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ Tous les tests sont pass√©s! Le bot est pr√™t √† √™tre utilis√©.")
        print("üí° Lancez le bot avec: python main.py")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les recommandations ci-dessus.")
        print("üí° Pour une installation compl√®te, lancez: python setup.py")

if __name__ == "__main__":
    main() 