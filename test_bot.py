#!/usr/bin/env python3
"""
Script de test pour le bot Telegram
"""

import os
import sys
from database import DriverDatabase
from config import MESSAGES, CITIES, PICKUP_LOCATIONS, DESTINATIONS

def test_database():
    """Test de la base de donn√©es"""
    print("üß™ Test de la base de donn√©es...")
    
    db = DriverDatabase()
    
    # Test de cr√©ation de la base de donn√©es
    print("‚úÖ Base de donn√©es initialis√©e")
    
    # Test de chargement des donn√©es
    if os.path.exists('drivers_data.xlsx'):
        if db.load_from_excel():
            print("‚úÖ Donn√©es Excel charg√©es avec succ√®s")
        else:
            print("‚ùå Erreur lors du chargement des donn√©es Excel")
    else:
        print("‚ö†Ô∏è Fichier Excel non trouv√©, cr√©ation de donn√©es d'exemple...")
        from utils.db_manager import DatabaseManager
        manager = DatabaseManager()
        manager.create_sample_data()
        if db.load_from_excel():
            print("‚úÖ Donn√©es d'exemple cr√©√©es et charg√©es")
        else:
            print("‚ùå Erreur lors de la cr√©ation des donn√©es d'exemple")
    
    # Test de recherche
    print("\nüîç Test de recherche...")
    results = db.search_drivers(city='Riyadh')
    print(f"R√©sultats pour Riyadh: {len(results)} chauffeurs trouv√©s")
    
    results = db.search_drivers(pickup_location='East')
    print(f"R√©sultats pour East: {len(results)} chauffeurs trouv√©s")
    
    results = db.search_drivers(destination='Universities')
    print(f"R√©sultats pour Universities: {len(results)} chauffeurs trouv√©s")

def test_config():
    """Test de la configuration"""
    print("\nüß™ Test de la configuration...")
    
    # Test des messages
    required_messages = [
        'welcome', 'select_service', 'looking_for_driver', 
        'driver_registration', 'exit'
    ]
    
    for msg in required_messages:
        if msg in MESSAGES:
            print(f"‚úÖ Message '{msg}' trouv√©")
        else:
            print(f"‚ùå Message '{msg}' manquant")
    
    # Test des options
    print(f"‚úÖ {len(CITIES)} villes configur√©es")
    print(f"‚úÖ {len(PICKUP_LOCATIONS)} zones de prise en charge configur√©es")
    print(f"‚úÖ {len(DESTINATIONS)} destinations configur√©es")

def test_messages():
    """Test des messages en arabe"""
    print("\nüß™ Test des messages en arabe...")
    
    # Test du message de bienvenue
    welcome_msg = f"{MESSAGES['welcome']}\n\n{MESSAGES['select_service']}\n"
    welcome_msg += f"{MESSAGES['looking_for_driver']}\n"
    welcome_msg += f"{MESSAGES['driver_registration']}\n"
    welcome_msg += f"{MESSAGES['exit']}"
    
    print("Message de bienvenue:")
    print(welcome_msg)
    print(f"Longueur: {len(welcome_msg)} caract√®res")
    
    # Test du message de s√©lection de ville
    city_msg = f"{MESSAGES['select_city']}\n"
    city_msg += f"{MESSAGES['riyadh']}\n"
    city_msg += f"{MESSAGES['dammam']}"
    
    print("\nMessage de s√©lection de ville:")
    print(city_msg)

def test_search_flow():
    """Test du flux de recherche"""
    print("\nüß™ Test du flux de recherche...")
    
    db = DriverDatabase()
    
    # Simulation d'une recherche compl√®te
    filters = {
        'city': 'Riyadh',
        'pickup_location': 'East',
        'destination': 'Universities'
    }
    
    results = db.search_drivers(
        city=filters['city'],
        pickup_location=filters['pickup_location'],
        destination=filters['destination']
    )
    
    print(f"Recherche avec filtres: {filters}")
    print(f"R√©sultats trouv√©s: {len(results)}")
    
    if results:
        print("Exemple de r√©sultat:")
        driver = results[0]
        print(f"  Nom: {driver[0]}")
        print(f"  T√©l√©phone: {driver[1]}")
        print(f"  Nationalit√©: {driver[2]}")
        print(f"  Type de v√©hicule: {driver[3]}")
        print(f"  Prix mensuel: {driver[4]} ÿ±ŸäÿßŸÑ")

def main():
    """Fonction principale de test"""
    print("üöÄ D√©marrage des tests du bot Telegram")
    print("=" * 50)
    
    try:
        test_config()
        test_database()
        test_messages()
        test_search_flow()
        
        print("\n‚úÖ Tous les tests sont pass√©s avec succ√®s!")
        print("\nüìã R√©sum√©:")
        print("- Configuration v√©rifi√©e")
        print("- Base de donn√©es fonctionnelle")
        print("- Messages en arabe corrects")
        print("- Flux de recherche op√©rationnel")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 